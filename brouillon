class Fichier_coDS:
    def __init__(self, proprio, name_fichier, type_fichier, key):
        self.proprio = proprio                                         # propriétaire du fichier
        self.name_fichier = name_fichier
        self.type_fichier = type_fichier
        self._key = self._crypt_key(key)                                 # cle du fichier

    def crypter(self, key):

    def decrypter(self, key):

    def info_fichier(self):
        print(f"Fichier enregistré par : {self.proprio}"
             # f"Le {save}"
              f"Chemin d'accès au fichier : {self.name_fichier}"
              f"Type du fichier : {self.type_fichier}")
    def _crypt_key(self, key):
        cle = byte(key)                                        # conversion de la chaine en byte
        cle_chiffree = hashlib.sha1(cle).hexdigest()
        return cle_chiffree


   elif opt_choisie == 'b':
                print("La cle de décryptage :")
                key = input(f"[{proprio}] >> ")
                print("Le nouveau nom au fichier décrypté :")
                name_fichier = input(f"[{proprio}] >> ")
                while not re.fullmatch('\d{3}', key):
                    print("La clé doit être un nombre de trois chiffres!")
                    key = input(f"[{proprio}] >> ")

                file = Fichier_coDS(proprio, name_fichier, key, type_fichier="décrypté")  # création de l'objet à crypter
                file.decrypter()
                with open(name_fichier) as f:
                    json.dump(file.info_fichier(),
                              f)  # creation du fichier json pour enregistrer les infos concernant le fichier

                print(f"Fichier bien enregistré le {date} par {file.proprio}")
                print(f"Type du fichier : {file.type_fichier}\n"
                      f"Chemin d'acces : {file.name_fichier}")
                break





A = 130
n = 0

e : Pour commencer une phrase (^)
s : Séparer deux lettres       ( )
     |4..1| : Pour montrer que c'est un point
c : Pour commencer un mot : 0x
	[a, b, f, j, k, l] : Pour la séparation hexadécimale des lettres : 0x

Deux types de nombres {
	[n, o, q, r, t, u, w, x, y, z] : nombres pour les lettres : normal
						 : nombres pour les chiffres : h avant chaque déclaration
}

Ponctuation : [
			p     : .
			4psv1 : ;
			v     : ,
			4pse1 : !
                  4psi1 : ?
                  m     : *
                  4pss1 : +
                  4mss1 : -
                  d     : /
                  g     : =
               ]



##################################################################
# Le programme que vous lisez n'est pas encore prêt à être lancé #
# Il nécessite encore des méthodes de cryptage et de décryptage  #
# Qui ne sont pas encore prêt                                    #
##################################################################

# Le fichier à crypter ou à décrypter ainsi que les fichiers sortants doivent tous être dans le
# répertoire courant d'où est lancé le programme. Merci.

# Pour commencer entrez le nom du fichier texte ou le chemin d'acces au fichier.

from coDS_class import Fichier_coDS
import re
import json
import datetime
from pathlib import Path

fichier_choisie = input("[coDS] >> ")  # nom du fichier entrant ou chemin d'acces au fichier
fichier_existe = Path(fichier_choisie).exists()
while True:

    if fichier_existe:
        # Conversion du chemin conforme
        # afficher menu

        opt_choisie = input("[coDS] >> ")

        if opt_choisie == 'a' or opt_choisie == 'b':
            print("Entrez votre pseudo :")
            proprio = input("[coDS] >> ")

            if opt_choisie == 'a':
                print("Entrez la clé de cryptage :")
                key = input(f"[{proprio}] >> ")
                while not re.fullmatch('\d{3}', key):
                    print("La clé doit être un nombre de trois chiffres!")
                    key = input(f"[{proprio}] >> ")

                file = Fichier_coDS(proprio, key, fichier_choisie)  # création de l'objet à crypter
                fichier = file.crypter(fichier_choisie, key)
                heure_crypte = datetime.datetime.now()
                info_fichier = file._info_fichier()  # infos concernant le fichier suite au cryptage
                info_fichier['Crypté le'] = heure_crypte  # ajout de la date de création du fichier au dictionnaire
                with open(f"{fichier_choisie}.json", 'w') as f:
                    json.dump(info_fichier, f,
                              indent=2)  # creation du fichier json pour enregistrer les infos concernant le fichier

                with open("README", 'w') as f:  # fichier README pour empêcher la suppression du fichier json
                    f.write('ATTENTION le fichier json créé suite au cryptage est strictement requis.'
                            'Il vous aidera à décripter votre fichier si besoin y est.'
                            'Et ne doit donc en aucun être cas supprimé!')

                print(f"Fichier bien crypté par {file.proprio}")
                print(f"Nom du fichier  : {fichier}")  # le nouveau fichier crée
                print(f"Accéder aux fichiers README et {fichier_choisie}.json pour plus de détails.")
                break
            elif opt_choisie == 'b':
                print("Entrez la clé de décryptage :")
                key = input(f"[{proprio}] >> ")  # La clé devrait être normalement crypté Bientôt ...
                while not re.fullmatch('\d{3}', key):
                    print("La clé doit être un nombre de trois chiffres!")
                    key = input(f"[{proprio}] >> ")

                print("Indiquez le nom du fichier json associé :")
                fichier_json = input("[coDS] >> ")
                with open(fichier_json) as j:
                    dict_json = json.load(j)

                while True:
                    if dict_json['Clé d\'accès'] == key and dict_json[
                        'Type du fichier'] == 'crypté':                                                          # vérifier si la clé est correcte et que le type est 'crypté' avant de procéder au décryptage
                        file = Fichier_coDS(key, )
                        fichier = file.decrypter(fichier_choisie, key)
                        print("Vôtre fichier est bien décrypté.")
                        print(f"Vous pouvez le consulter sous le nom de {fichier}.")
                        print(f"À bientôt {proprio}")
                        break
                    else:
                        print(
                            "La clé entrée est incorrecte ou le fichier entré est déjà crypté. Voulez vous réessayer ? (y/n)")  # si l'utilisateur veut réessayer
                        essai = input(f"[{proprio}] >> ")
                        if essai == 'y':
                            continue
                        else:
                            break
                break
            break

        elif opt_choisie == 'c':
            print('Bientôt ...')  # interface root pour administrer les fichiers entrant et sortant du programme
            break
        elif opt_choisie == 'q':
            print("À bientôt :-)")
            break
        else:
            print("""Vous n'avez pas saisie une option du menu. Veuillez reprendre!""")
            continue

    else:
        # Le chemin n'existe pas
        print("Le fichier n'existe pas.")
        print("Voulez-vous bien retapper le chemin exact (y/n) ?")
        opt_choisie = input("[coDS] >> ")

        if opt_choisie == 'y':
            opt_choisie = input("[coDS] >> ")
        else:
            break



def file_right("ez.py", right="a"):
    "fonction qui vérifie les droits sur le fichier"
    try:
        f = open(file, right)
        print("Permission accordée")
        entre = input("Entre quelquechose: ")
        f.write(entre)
        f.close()
        return True
    except PermissionError:
        print("Permission refusée")
        return False

file_right()